# -*- coding: utf-8 -*-
"""Fruit analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16dbEAySFUV5nJYh4MZ-sQ93sq_DhuiPu
"""

# Install necessary libraries (only if not already installed)
!pip install easyocr
!pip install gspread
!pip install oauth2client
!pip install opencv-python-headless

# Import libraries
import easyocr
import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab import drive, files
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os
import re

# Upload your Google credentials
files.upload()  # This will prompt you to upload 'client_secret.json'

# Setup the Google Sheets API
scope = ["https://spreadsheets.google.com/feeds", 'https://www.googleapis.com/auth/drive']
creds = ServiceAccountCredentials.from_json_keyfile_name('client_secret.json', scope)
client = gspread.authorize(creds)

# Use your Spreadsheet ID
spreadsheet_id = '1Ujkc-lIu40EAS1qIfmqrqOgdGJZRBHJ92enVdvxB_ho'  # Replace with your actual spreadsheet ID
sheet = client.open_by_key(spreadsheet_id).sheet1

# Function to preprocess the image
def preprocess_image(img):
    # Convert to grayscale
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # Apply Gaussian blur to reduce noise
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)

    # Apply adaptive thresholding
    thresh = cv2.adaptiveThreshold(blurred, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                                   cv2.THRESH_BINARY, 11, 2)

    return thresh

# Initialize EasyOCR Reader
reader = easyocr.Reader(['en'])  # Specify languages as needed

# Function to extract expiry date from text
def extract_expiry_date(text):
    # Regex patterns for common date formats (MM/DD/YYYY, DD/MM/YYYY, etc.)
    date_patterns = [
        r'(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})',  # Matches formats like 12/31/2024 or 31-12-24
        r'(\d{4}[/-]\d{1,2}[/-]\d{1,2})'   # Matches formats like 2024-12-31
    ]

    for pattern in date_patterns:
        match = re.search(pattern, text)
        if match:
            return match.group(0)  # Return the first matched date

    return "No expiry date detected"

# Function to log results into Google Sheets
def log_results_to_sheet(image_name, detected_text, expiry_date):
    sheet.append_row([image_name, detected_text, expiry_date])  # Append image name, text, and expiry date to the sheet

# Main function for OCR
def perform_ocr(image_path):
    print(f"Processing image: {image_path}")  # Debugging print to track the current image
    img = cv2.imread(image_path)

    if img is None:
        print(f"Image not found or unreadable: {image_path}")
        return

    processed_image = preprocess_image(img)

    # Perform OCR
    results = reader.readtext(processed_image)

    # Prepare detected text for logging
    detected_texts = [text for (_, text, _) in results]
    detected_text = ", ".join(detected_texts) if detected_texts else "No text detected"

    # Extract expiry date
    expiry_date = extract_expiry_date(detected_text)

    # Log results
    image_name = os.path.basename(image_path)  # Get image name from the path
    log_results_to_sheet(image_name, detected_text, expiry_date)

    # Display results
    print(f"Detected text in {image_name}: {detected_text}")
    print(f"Expiry date in {image_name}: {expiry_date}")

    # Visualize the results
    for (bbox, text, _) in results:
        (top_left, top_right, bottom_right, bottom_left) = bbox
        top_left = tuple(map(int, top_left))
        bottom_right = tuple(map(int, bottom_right))
        cv2.rectangle(processed_image, top_left, bottom_right, (0, 255, 0), 2)
        cv2.putText(processed_image, text, (top_left[0], top_left[1] - 10),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)

    plt.imshow(processed_image, cmap='gray')
    plt.axis('off')
    plt.show()

# Main processing loop for all images in the specified directory
drive.mount('/content/drive')  # Mount Google Drive
folder_path = '/content/drive/MyDrive/uploaded_images/'  # Path to the images folder

# Loop through each image in the folder
for img_file in os.listdir(folder_path):
    if img_file.lower().endswith(('.jpg', '.jpeg', '.png')):  # Check for image files, case-insensitive
        image_path = os.path.join(folder_path, img_file)
        perform_ocr(image_path)

print("OCR processing and logging completed.")