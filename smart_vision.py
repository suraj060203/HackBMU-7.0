# -*- coding: utf-8 -*-
"""smart vision

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dHxS2xYGBqIvMpr4QjSiSZAjd5Bi1_6n
"""

# Install necessary libraries (only if not already installed)
!pip install torch torchvision ultralytics  # For YOLOv5
!pip install numpy==1.23.5
!pip install matplotlib
!pip install ultralytics

!pip install tensorflow==2.9.0
!pip install opencv-python-headless
!pip install gspread oauth2client

# Step 1: Import necessary libraries and mount Google Drive
from google.colab import drive
import os
import cv2
import numpy as np
import pandas as pd
from ultralytics import YOLO
from tensorflow.keras.applications.efficientnet import EfficientNetB0, preprocess_input, decode_predictions
from tensorflow.keras.preprocessing import image
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# Mount Google Drive
drive.mount('/content/drive')

# Folder path where images will be uploaded
folder_path = '/content/drive/MyDrive/uploaded_images/'  # Replace with your folder path

# Load YOLOv5 model for object detection (quantity)
yolo_model = YOLO('yolov5s.pt')

# Load EfficientNetB0 for classification (percentage product prediction)
eff_model = EfficientNetB0(weights='imagenet')

# Setup the Google Sheets API
scope = ["https://spreadsheets.google.com/feeds", 'https://www.googleapis.com/auth/drive']
creds = ServiceAccountCredentials.from_json_keyfile_name('/content/client_secret.json', scope)
client = gspread.authorize(creds)

# Use the Spreadsheet ID instead of name
spreadsheet_id = '1IzFmPvvOBn4-14B1z30LJtaOYmXaU2GHm6uiqMYOu5M'  # Replace with your actual spreadsheet ID
sheet = client.open_by_key(spreadsheet_id).sheet1

# Function to check for new images in the folder
def check_for_new_images():
    images = [f for f in os.listdir(folder_path) if f.endswith(('.jpg', '.jpeg', '.png'))]
    return images

# YOLOv5 object detection for quantity
def detect_objects_yolo(image_path):
    results = yolo_model(image_path)

    if results is None or len(results) == 0:
        print(f"No objects detected in {image_path}")
        return 0, "No objects detected"

    # Extract detected objects and their counts
    detected_classes = [results[0].names[int(box.cls)] for box in results[0].boxes]  # Get class names for detected boxes

    # Create a string summarizing the detection
    detection_summary = ', '.join([f"{detected_classes.count(cls)} {cls}" for cls in set(detected_classes)])

    print(f"Estimated quantity (number of items) for {image_path}: {detection_summary}")

    return len(detected_classes), detection_summary  # Return count and summary

# EfficientNet for predicting product type with percentages
def predict_product_type(image_path):
    img = image.load_img(image_path, target_size=(224, 224))
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = preprocess_input(img_array)

    predictions = eff_model.predict(img_array)
    decoded_predictions = decode_predictions(predictions, top=3)[0]  # Get top 3 predictions

    print(f"Product predictions for {image_path}:")
    product_predictions = {}
    for _, label, prob in decoded_predictions:
        product_predictions[label] = prob * 100  # Convert to percentage
        print(f"{label}: {prob * 100:.2f}%")

    return product_predictions

# Freshness Detection (realistic score based on image quality)
def assess_freshness(image_path):
    img = cv2.imread(image_path)
    hsv_img = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)

    h_hist = cv2.calcHist([hsv_img], [0], None, [256], [0, 256])  # Hue histogram
    h_mean = np.mean(h_hist)

    freshness_score = min(1.0, max(0.0, h_mean / 128.0)) * 100  # Normalized freshness score

    if freshness_score > 90:
        freshness_score -= np.random.uniform(5, 10)  # Randomly lower overly high scores

    print(f"Freshness score for {image_path}: {freshness_score:.2f}%")
    return freshness_score

# Function to log results into Google Sheets
def log_predictions_to_sheet(image_name, detection_summary, product_predictions, quantity, freshness_score):
    result_data = {
        'Image': image_name,
        'Detection Summary': detection_summary,
        'Product Predictions': ', '.join([f"{label}: {round(prob)}%" for label, prob in product_predictions.items()]),
        'Quantity': quantity,
        'Freshness Score (%)': freshness_score,
    }

    sheet.append_row(list(result_data.values()))  # Append the row to Google Sheets

# Main processing loop for new images
new_images = check_for_new_images()
for img_file in new_images:
    img_path = os.path.join(folder_path, img_file)

    # 1. Quantity Detection using YOLOv5
    quantity, detection_summary = detect_objects_yolo(img_path)  # Get quantity and detection summary

    # 2. Product Type Prediction using EfficientNetB0
    product_predictions = predict_product_type(img_path)

    # 3. Freshness Detection
    freshness_score = assess_freshness(img_path)

    # Log results to Google Sheets
    log_predictions_to_sheet(img_file, detection_summary, product_predictions, quantity, freshness_score)

print("Image processing and logging completed.")

from google.colab import files
files.upload()  # This will prompt you to upload 'client_secret.json'

import gspread
from oauth2client.service_account import ServiceAccountCredentials

# Setup the Google Sheets API
scope = ["https://spreadsheets.google.com/feeds", 'https://www.googleapis.com/auth/drive']
creds = ServiceAccountCredentials.from_json_keyfile_name('/content/client_secret.json', scope)
client = gspread.authorize(creds)

# Use the Spreadsheet ID instead of name
spreadsheet_id = '1IzFmPvvOBn4-14B1z30LJtaOYmXaU2GHm6uiqMYOu5M'  # Replace with your actual spreadsheet ID
sheet = client.open_by_key(spreadsheet_id).sheet1

# Function to log results into a Google Sheet
def log_predictions_to_sheet(image_name, product_predictions, quantity, freshness_score):
    # Prepare product predictions as a string
    product_predictions_str = ', '.join([f"{label}: {round(prob, 2)}%" for label, prob in product_predictions.items()])

    # Log the data to the Google Sheet
    sheet.append_row([image_name, product_predictions_str, quantity, freshness_score])

    # Print to confirm in Colab
    print(f"Logged to Google Sheets: {image_name}, Predictions: {product_predictions_str}, Quantity: {quantity}, Freshness Score: {freshness_score:.2f}")

# Example usage (this will be called in Block 1)
# log_predictions_to_sheet('IMG20241015145314.jpg', product_predictions, quantity, freshness_score)